name: React CICD

on:
  push:
    branches: [ "develop", "main", "master"]
  pull_request:
    types:
      - closed
    branches: [ "develop", "main", "master"]

permissions:
  contents: read
      
jobs:
  image-push:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Create env file'
        run: |
          cd ./packages/app
          touch .env.production
          echo REACT_APP_KAKAO_API_KEY=${{ secrets.REACT_APP_KAKAO_API_KEY }} >> .env.production
          echo REACT_APP_KAKAO_API_LOGIN_URL=${{ secrets.REACT_APP_KAKAO_API_LOGIN_URL }} >> .env.production
          echo REACT_APP_KAKAO_API_ACCESS_TOKEN=${{ secrets.REACT_APP_KAKAO_API_ACCESS_TOKEN }} >> .env.production
          echo REACT_APP_KAKAO_API_MESSAGE_URL=${{ secrets.REACT_APP_KAKAO_API_MESSAGE_URL }} >> .env.production
          cat .env.production


      # - name: Login to GHCR
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
            
      - name: Docker Image Build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile  -t ${{ secrets.DOCKER_IMAGE_NAME }} .
          docker images -a
          docker tag ${{ secrets.DOCKER_IMAGE_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:latest
     
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
            sudo docker stop ${{ secrets.DOCKER_IMAGE_NAME }}
            sudo docker rm ${{ secrets.DOCKER_IMAGE_NAME }}
            sudo docker run --name ${{ secrets.DOCKER_IMAGE_NAME }} -d -p 9009:9009 -p 9090:9090 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
            sudo docker rmi $(sudo docker images --filter "dangling=true" -q --no-trunc)
      
      - name: slack-action-success
        uses: 8398a7/action-slack@v3
        with:
          text: '[Github Actions]프론트엔드 배포 완료'
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }} # required
        if: success() # Pick up events even if the job fails or is canceled.

      # - name: slack-action-fail
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     text: '[Github Actions]프론트엔드 배포 실패'
      #     status: ${{ job.status }}
      #     fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_URL }} # required
      #   if: failure()
